---

import Tailwind from "./icons/Tailwind.astro";
import React from "./icons/React.astro";
import Spring from "./icons/Spring.astro";
import Html from "./icons/Html.astro";
import Css from "./icons/Css.astro";
import Javascript from "./icons/Javascript.astro";
import Php from "./icons/Php.astro";
import Demo from "./icons/Demo.astro";
import Github from "./icons/Github.astro";
import Badge from "./Badge.astro";
import SocialPill from "./icons/SocialPill.astro";
import LinkButton from "./LinkButton.astro";


const TAGS = {
    TAILWIND: {
        name: "Tailwind CSS",
        class: "bg-[#003159] text-white",
        icon: Tailwind,
    },
    REACT: {
        name: "React",
        class: "bg-white text-black",
        icon: React,
    },
    SPRING: {
        name: "Spring Boot",
        class: "text-white",
        icon: Spring,
    },
    HTML: {
        name: "HTML",
        class: "text-white",
        icon: Html,
    },
    CSS: {
        name: "CSS",
        class: "text-white",
        icon: Css,
    },
    JAVASCRIPT: {
        name: "JavaScript",
        class: "text-white",
        icon: Javascript,
    },
    PHP: {
        name: "PHP",
        class: "bg-[#777BB3] text-white",
        icon: Php,
    }

};

const PROJECTS = [
  {
    title: 'Consulta de Reposos',
    description: 'Formulario de consulta de reposos médicos con generación de PDF y código QR.',	
    image: ['/images/reposos.webp'],
    link: 'https://juanpa27.github.io/reposos/',
    github: 'https://github.com/juanpa27/reposos',
    tags: [TAGS.TAILWIND, TAGS.REACT, TAGS.SPRING],
  },
  {
    title: 'Tickets para Soporte Técnico y Mantenimiento',
    description: 'Interfaz web para generación de tickets para soporte técnico y tickets para mantenimiento con integración a la API de Redmine.',
    image: ['/images/dmt.webp', '/images/dtic.webp'],
    link: 'https://portal.ips.gov.py/sistemas/dtic/',
    github: '',
    tags: [TAGS.HTML, TAGS.CSS, TAGS.JAVASCRIPT, TAGS.PHP],
  }
];
---
{
    PROJECTS.map(({title,description,image,link,github,tags}) => (
            <div class="max-w-full rounded-lg shadow-lg mt-8">
                <h5 class="flex items-center justify-between mb-2 text-2xl font-semibold text-yellow-200">
                    <span>{title}</span>

                    
                </h5>

                <p class="mb-3 text-lg font-normal text-gray-200 dark:text-gray-200 text-pretty">
                    {description}
                </p>
                <ul class="flex gap-x-2 flex-row mb-2">
                    {tags.map((tag) => (
                        <span class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2`}>
                            <tag.icon class="w-4 h-4" />
                            {tag.name}
                        </span>
                    ))}    
                </ul>
            </div>
            <div id="indicators-carousel" class="relative w-full h-full" data-carousel="static">
                <!-- Carousel wrapper -->
                {image.length > 1 ? (
                    <div class="relative h-[285px] md:h-[555px] overflow-hidden rounded-lg">
                        <!-- Item 1 -->
                        {image.map((img, index) => (
                            <div class={`hidden duration-700 ease-in-out ${index === 0 ? 'block' : ''}`} data-carousel-item="active">
                                <img 
                                    src={img} 
                                    alt={title} 
                                    class="shadow-6xl shadow-white/10 absolute w-full h-full object-cover transform -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2" 
                                />
                            </div>
                        ))}
                    </div>
                ) : (
                    <img src={image[0]} alt={title} class="rounded shadow-2xl shadow-white/10 object-cover w-full h-full" />
                )}

                <!-- Slider indicators -->
                {image.length > 1 && (
                    <div class="absolute z-30 flex -translate-x-1/2 space-x-3 rtl:space-x-reverse bottom-5 left-1/2">
                        {image.map((_, index) => (
                            <button
                                type="button"
                                class={`w-3 h-3 rounded-full ${index === 0 ? 'bg-white' : 'bg-gray-300'}`}
                                aria-current={index === 0 ? 'true' : 'false'}
                                aria-label={`Slide ${index + 1}`}
                                data-carousel-slide-to={index}
                            ></button>
                        ))}
                    </div>
                )}

                <!-- Slider controls -->
                {image.length > 1 && (
                    <>
                        <button type="button" class="absolute top-0 start-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none" data-carousel-prev>
                            <span class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none">
                                <svg class="w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1 1 5l4 4"/>
                                </svg>
                                <span class="sr-only">Anterior</span>
                            </span>
                        </button>
                        <button type="button" class="absolute top-0 end-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none" data-carousel-next>
                            <span class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none">
                                <svg class="w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
                                </svg>
                                <span class="sr-only">Siguiente</span>
                            </span>
                        </button>
                    </>
                )}
            </div>
            <footer>
                <span class="flex gap-x-4 mt-4">
                        {
                            link && 
                            <LinkButton href={link}  >
                                
                                Ir al sitio <Demo class="size-6 lg:size-7" /> 
                                
                            </LinkButton>
                        }
                        {
                            github && 
                            <LinkButton href={github} >
                                
                                Ver código fuente <Github class="hover:to-white size-6 lg:size-7" /> 
                                
                            </LinkButton>    
                        }
                            
                    </span>
            </footer>

            
       

            

            
            
    ))
}


